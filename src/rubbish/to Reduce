public String toReduce (BinaryButton b1,BinaryButton b2){
        if(b1.getQueue().length()<b2.getQueue().length()){
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(b1.getQueue());
            int difference = b2.getQueue().length()-b1.getQueue().length();
            for (int i=0;i<difference;i++){
                stringBuilder.append("0");
            }
            b1.setQueue(stringBuilder.toString());
            b1.setQueue(new StringBuffer(b1.getQueue()).reverse().toString());
            b2.setQueue(new StringBuffer(b2.getQueue()).reverse().toString());
            System.out.println(b1.getQueue());
        }

        else if(b2.getQueue().length()<b1.getQueue().length()){
            StringBuilder sb = new StringBuilder();
            sb.append(b2.getQueue());
            int difference = b1.getQueue().length()-b2.getQueue().length();
            for (int i=0;i<difference;i++){
                sb.append("0");
            }
            b2.setQueue(sb.toString());
            b2.setQueue(new StringBuffer(b2.getQueue()).reverse().toString());
            b1.setQueue(new StringBuffer(b1.getQueue()).reverse().toString());
            System.out.println(b2.getQueue());
        }
        System.out.println(b2.getQueue());
        Queue queue1= new LinkedList<>(Arrays.asList(b1.getQueue().split("(?<=\\G.{1})")));
        Queue queue2= new LinkedList<>(Arrays.asList(b2.getQueue().split("(?<=\\G.{1})")));

        StringBuilder stringBuilder = new StringBuilder();

        Iterator<String> iterator1 = queue1.iterator();
        Iterator<String> iterator2 = queue2.iterator();

        while (iterator1.hasNext()){
            String s1 = iterator1.next().toString();
            String s2 = iterator2.next().toString();

            if(s1.equals(s2)){
                stringBuilder.append(s1);
            }
            else {
                stringBuilder.append("-");
            }
        }
        return stringBuilder.toString();
    }